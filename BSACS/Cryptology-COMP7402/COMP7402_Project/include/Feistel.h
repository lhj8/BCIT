#ifndef COMP7402_PROJECT_FEISTEL_H
#define COMP7402_PROJECT_FEISTEL_H

#include <iostream>
#include <fstream>
#include <sstream>
#include <limits>
#include <utility>
#include <vector>
#include <string>
#include <iomanip>
#include <bitset>
#include <algorithm>
#include <cctype>
#include "User.h"
#include "key.h"
#include "common.h"
#include "Client.h"
#include "User.h"

using namespace std;

class Feistel {
private:
    string data_;
    string hexdata_;
    string bindata_;
public:
    void initializeData(Client& u);
    static string feistel (const string& bin, const vector<string>& rk);

    void CBC_encrypt(Client& u);
    void CBC_decrypt(User& u, string &bin_data);
};


// Initial permutation table
static int initial_permutation[128] = {
        66, 79, 60, 45, 125, 90, 107, 29,
        99, 85, 59, 69, 75, 43, 114, 120,
        5, 89, 3, 12, 80, 46, 28, 58,
        123, 121, 63, 10, 13, 21, 8, 42,
        33, 7, 92, 11, 24, 126, 96, 124,
        6, 94, 61, 67, 98, 34, 110, 97,
        88, 55, 74, 115, 100, 26, 68, 48,
        72, 49, 44, 70, 40, 57, 4, 113,
        95, 41, 117, 101, 32, 91, 119, 112,
        84, 111, 93, 9, 30, 62, 127, 106,
        54, 71, 38, 104, 73, 122, 2, 78,
        86, 87, 128, 15, 64, 118, 16, 82,
        18, 105, 109, 116, 65, 103, 81, 14,
        108, 56, 47, 76, 53, 27, 77, 39,
        20, 23, 25, 37, 22, 50, 19, 83,
        36, 35, 31, 52, 102, 17, 51, 1
};

// Expansion table
static int expansion_table[128] = {
        1,2,3,4,5,6,7,8,
        1,3,5,7,2,4,6,8,

        9,10,11,12,13,14,15,16,
        10,12,14,16,9,11,13,15,

        17,18,19,20,21,22,23,24,
        17,19,21,23,18,20,22,24,

        25,26,27,28,29,30,31,32,
        26,28,30,32,25,27,29,31,

        33,34,35,36,37,38,39,40,
        33,35,37,39,34,36,38,40,

        41,42,43,44,45,46,47,48,
        42,44,46,48,41,43,45,47,

        49,50,51,52,53,54,55,56,
        49,51,53,55,50,52,54,56,

        57,58,59,60,61,62,63,64,
        58,60,62,64,57,59,61,63
};


// SUBSTITUTION BOX
static int substitution_boxes[8][4][16]={{
                 14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7,
                 0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8,
                 4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0,
                 15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13
         },
         {
                 15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10,
                 3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5,
                 0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15,
                 13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9
         },
         {
                 10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8,
                 13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1,
                 13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7,
                 1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12
         },
         {
                 7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15,
                 13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9,
                 10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4,
                 3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14
         },
         {
                 2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9,
                 14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6,
                 4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14,
                 11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3
         },
         {
                 12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11,
                 10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8,
                 9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6,
                 4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13
         },
         {
                 4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1,
                 13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6,
                 1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2,
                 6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12
         },
         {
                 13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7,
                 1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2,
                 7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8,
                 2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11
         }
        };


// PERMUTATION TABLE
static int permutation_tab[64] = {
        94, 26, 92, 61, 10, 14, 109, 70,
        30, 38, 31, 22, 51, 90, 97, 25,
        120, 102, 18, 20, 53, 19, 23, 49,
        56, 78, 57, 7, 71, 42, 80, 101,
        4, 63, 115, 117, 118, 124, 76, 69,
        103, 17, 77, 123, 15, 75, 29, 11,
        32, 66, 6, 13, 86, 89, 125, 36,
        28, 73, 44, 62, 114, 58, 46, 111
};


// INVERSE PERMUTATION TABLE
static int inverse_permutation[128]= {
        128, 87, 19, 63, 17, 41, 34, 31,
        76, 28, 36, 20, 29, 104, 92, 95,
        126, 97, 119, 113, 30, 117, 114, 37,
        115, 54, 110, 23, 8, 77, 123, 69,
        33, 46, 122, 121, 116, 83, 112, 61,
        66, 32, 14, 59, 4, 22, 107, 56,
        58, 118, 127, 124, 109, 81, 50, 106,
        62, 24, 11, 3, 43, 78, 27, 93,
        101, 1, 44, 55, 12, 60, 82, 57,
        85, 51, 13, 108, 111, 88, 2, 21,
        103, 96, 120, 73, 10, 89, 90, 49,
        18, 6, 70, 35, 75, 42, 65, 39,
        48, 45, 9, 53, 68, 125, 102, 84,
        98, 80, 7, 105, 99, 47, 74, 72,
        64, 15, 52, 100, 67, 94, 71, 16,
        26, 86, 25, 40, 5, 38, 79, 91
};


#endif //COMP7402_PROJECT_FEISTEL_H
